// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, Client, TDataShape } from "./client";
import type {
  CreateUserProfileApiUsersPostData,
  CreateUserProfileApiUsersPostResponses,
  CreateUserProfileApiUsersPostErrors,
  DeleteMyProfileApiUsersMeDeleteData,
  DeleteMyProfileApiUsersMeDeleteResponses,
  DeleteMyProfileApiUsersMeDeleteErrors,
  GetMyProfileApiUsersMeGetData,
  GetMyProfileApiUsersMeGetResponses,
  GetMyProfileApiUsersMeGetErrors,
  UpdateMyProfileApiUsersMePutData,
  UpdateMyProfileApiUsersMePutResponses,
  UpdateMyProfileApiUsersMePutErrors,
  GetUserProfileApiUsersUserIdGetData,
  GetUserProfileApiUsersUserIdGetResponses,
  GetUserProfileApiUsersUserIdGetErrors,
  CreatePostcardApiPostcardsPostData,
  CreatePostcardApiPostcardsPostResponses,
  CreatePostcardApiPostcardsPostErrors,
  DeletePostcardApiPostcardsPostcardIdDeleteData,
  DeletePostcardApiPostcardsPostcardIdDeleteResponses,
  DeletePostcardApiPostcardsPostcardIdDeleteErrors,
  GetPostcardDetailApiPostcardsPostcardIdGetData,
  GetPostcardDetailApiPostcardsPostcardIdGetResponses,
  GetPostcardDetailApiPostcardsPostcardIdGetErrors,
  UpdatePostcardApiPostcardsPostcardIdPutData,
  UpdatePostcardApiPostcardsPostcardIdPutResponses,
  UpdatePostcardApiPostcardsPostcardIdPutErrors,
  GetPostcardPathApiPostcardsPostcardIdPathGetData,
  GetPostcardPathApiPostcardsPostcardIdPathGetResponses,
  GetPostcardPathApiPostcardsPostcardIdPathGetErrors,
  GetNearbyPostcardsApiPostcardsNearbyGetData,
  GetNearbyPostcardsApiPostcardsNearbyGetResponses,
  GetNearbyPostcardsApiPostcardsNearbyGetErrors,
  CollectPostcardApiPostcardsPostcardIdCollectPostData,
  CollectPostcardApiPostcardsPostcardIdCollectPostResponses,
  CollectPostcardApiPostcardsPostcardIdCollectPostErrors,
  GetMyPostcardsApiPostcardsMyGetData,
  GetMyPostcardsApiPostcardsMyGetResponses,
  GetMyPostcardsApiPostcardsMyGetErrors,
  LikePostcardApiPostcardsPostcardIdLikePostData,
  LikePostcardApiPostcardsPostcardIdLikePostResponses,
  LikePostcardApiPostcardsPostcardIdLikePostErrors,
  GetMyCollectionApiUsersMeCollectionGetData,
  GetMyCollectionApiUsersMeCollectionGetResponses,
  GetMyCollectionApiUsersMeCollectionGetErrors,
  ReadRootGetData,
  ReadRootGetResponses,
} from "./types.gen";
import { client } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * ユーザープロフィール作成
 * Amazon Cognitoでの新規登録後、ユーザーのプロフィール情報を初めて作成する際に利用します。
 */
export const createUserProfileApiUsersPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreateUserProfileApiUsersPostData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    CreateUserProfileApiUsersPostResponses,
    CreateUserProfileApiUsersPostErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/users",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * 自身のユーザー削除
 * 認証済みユーザー自身を削除します。**注意: この操作は取り消せません。**
 */
export const deleteMyProfileApiUsersMeDelete = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<DeleteMyProfileApiUsersMeDeleteData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteMyProfileApiUsersMeDeleteResponses,
    DeleteMyProfileApiUsersMeDeleteErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/users/me",
    ...options,
  });
};

/**
 * 自身のユーザー情報取得
 * 認証済みユーザー自身の情報を取得します。
 */
export const getMyProfileApiUsersMeGet = <ThrowOnError extends boolean = false>(
  options?: Options<GetMyProfileApiUsersMeGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetMyProfileApiUsersMeGetResponses,
    GetMyProfileApiUsersMeGetErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/users/me",
    ...options,
  });
};

/**
 * 自身のユーザー情報更新
 * 認証済みユーザー自身の情報を更新します。
 */
export const updateMyProfileApiUsersMePut = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UpdateMyProfileApiUsersMePutData, ThrowOnError>,
) => {
  return (options.client ?? client).put<
    UpdateMyProfileApiUsersMePutResponses,
    UpdateMyProfileApiUsersMePutErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/users/me",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * 他のユーザー情報取得
 * 指定した user_id のユーザー情報を取得します。他のユーザーのプロフィール閲覧に利用します。
 */
export const getUserProfileApiUsersUserIdGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetUserProfileApiUsersUserIdGetData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetUserProfileApiUsersUserIdGetResponses,
    GetUserProfileApiUsersUserIdGetErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/users/{user_id}",
    ...options,
  });
};

/**
 * 絵葉書作成
 * 新しいデジタル絵葉書を作成し、サーバーに保存します。このAPIは、絵葉書の画像をアップロードした後で呼び出されます。
 */
export const createPostcardApiPostcardsPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreatePostcardApiPostcardsPostData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    CreatePostcardApiPostcardsPostResponses,
    CreatePostcardApiPostcardsPostErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/postcards",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * 絵葉書削除
 * ユーザーが作成した絵葉書を削除します。
 */
export const deletePostcardApiPostcardsPostcardIdDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    DeletePostcardApiPostcardsPostcardIdDeleteData,
    ThrowOnError
  >,
) => {
  return (options.client ?? client).delete<
    DeletePostcardApiPostcardsPostcardIdDeleteResponses,
    DeletePostcardApiPostcardsPostcardIdDeleteErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/postcards/{postcard_id}",
    ...options,
  });
};

/**
 * 絵葉書詳細取得
 * 指定した絵葉書の詳細情報を取得します。コレクションから詳細画面を表示する際に利用します。
 */
export const getPostcardDetailApiPostcardsPostcardIdGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetPostcardDetailApiPostcardsPostcardIdGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? client).get<
    GetPostcardDetailApiPostcardsPostcardIdGetResponses,
    GetPostcardDetailApiPostcardsPostcardIdGetErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/postcards/{postcard_id}",
    ...options,
  });
};

/**
 * 絵葉書更新
 * ユーザーが作成した絵葉書の内容（テキスト、画像）を更新します。
 */
export const updatePostcardApiPostcardsPostcardIdPut = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UpdatePostcardApiPostcardsPostcardIdPutData, ThrowOnError>,
) => {
  return (options.client ?? client).put<
    UpdatePostcardApiPostcardsPostcardIdPutResponses,
    UpdatePostcardApiPostcardsPostcardIdPutErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/postcards/{postcard_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * 絵葉書の旅の軌跡取得
 * 指定した絵葉書がこれまでに辿った旅の軌跡（経由地）を取得します。
 */
export const getPostcardPathApiPostcardsPostcardIdPathGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetPostcardPathApiPostcardsPostcardIdPathGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? client).get<
    GetPostcardPathApiPostcardsPostcardIdPathGetResponses,
    GetPostcardPathApiPostcardsPostcardIdPathGetErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/postcards/{postcard_id}/path",
    ...options,
  });
};

/**
 * 近くの絵葉書取得
 * クライアントの現在地付近を通過中の、リレー中の絵葉書を取得します。このAPIは、クライアント側で定期的に呼び出されることを想定しています。
 */
export const getNearbyPostcardsApiPostcardsNearbyGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetNearbyPostcardsApiPostcardsNearbyGetData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetNearbyPostcardsApiPostcardsNearbyGetResponses,
    GetNearbyPostcardsApiPostcardsNearbyGetErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/postcards/nearby",
    ...options,
  });
};

/**
 * 絵葉書をコレクションに追加
 * 地図上で見つけた絵葉書を「拾う」APIです。拾われた絵葉書はユーザーのコレクションに追加され、他のユーザーには表示されなくなります。
 */
export const collectPostcardApiPostcardsPostcardIdCollectPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    CollectPostcardApiPostcardsPostcardIdCollectPostData,
    ThrowOnError
  >,
) => {
  return (options.client ?? client).post<
    CollectPostcardApiPostcardsPostcardIdCollectPostResponses,
    CollectPostcardApiPostcardsPostcardIdCollectPostErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/postcards/{postcard_id}/collect",
    ...options,
  });
};

/**
 * 自分の投稿した絵葉書取得
 * ログイン中のユーザーが投稿した全ての絵葉書を取得します。作成日時の新しい順に並びます。
 */
export const getMyPostcardsApiPostcardsMyGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetMyPostcardsApiPostcardsMyGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetMyPostcardsApiPostcardsMyGetResponses,
    GetMyPostcardsApiPostcardsMyGetErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/postcards/my",
    ...options,
  });
};

/**
 * 絵葉書にいいね
 * 指定した絵葉書に「いいね」を押します。
 */
export const likePostcardApiPostcardsPostcardIdLikePost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    LikePostcardApiPostcardsPostcardIdLikePostData,
    ThrowOnError
  >,
) => {
  return (options.client ?? client).post<
    LikePostcardApiPostcardsPostcardIdLikePostResponses,
    LikePostcardApiPostcardsPostcardIdLikePostErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/postcards/{postcard_id}/like",
    ...options,
  });
};

/**
 * 自身のコレクション取得
 * ログイン中のユーザーが拾った絵葉書のコレクション一覧を取得します。
 */
export const getMyCollectionApiUsersMeCollectionGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetMyCollectionApiUsersMeCollectionGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetMyCollectionApiUsersMeCollectionGetResponses,
    GetMyCollectionApiUsersMeCollectionGetErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/users/me/collection",
    ...options,
  });
};

/**
 * Read Root
 */
export const readRootGet = <ThrowOnError extends boolean = false>(
  options?: Options<ReadRootGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ReadRootGetResponses,
    unknown,
    ThrowOnError
  >({
    url: "/",
    ...options,
  });
};
